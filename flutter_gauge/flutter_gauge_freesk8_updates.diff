[1mdiff --git a/example/android/gradle.properties b/example/android/gradle.properties[m
[1mindex 2bd6f4f..1441b1d 100644[m
[1m--- a/example/android/gradle.properties[m
[1m+++ b/example/android/gradle.properties[m
[36m@@ -1,2 +1,3 @@[m
 org.gradle.jvmargs=-Xmx1536M[m
 [m
[32m+[m[32mandroid.enableR8=true[m
[1mdiff --git a/example/pubspec.lock b/example/pubspec.lock[m
[1mindex 362f266..211853f 100644[m
[1m--- a/example/pubspec.lock[m
[1m+++ b/example/pubspec.lock[m
[36m@@ -1,13 +1,27 @@[m
 # Generated by pub[m
 # See https://dart.dev/tools/pub/glossary#lockfile[m
 packages:[m
[32m+[m[32m  archive:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: archive[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "2.0.11"[m
[32m+[m[32m  args:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: args[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "1.5.2"[m
   async:[m
     dependency: transitive[m
     description:[m
       name: async[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
[31m-    version: "2.3.0"[m
[32m+[m[32m    version: "2.4.0"[m
   boolean_selector:[m
     dependency: transitive[m
     description:[m
[36m@@ -29,6 +43,20 @@[m [mpackages:[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
     version: "1.14.11"[m
[32m+[m[32m  convert:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: convert[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "2.1.1"[m
[32m+[m[32m  crypto:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: crypto[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "2.1.3"[m
   cupertino_icons:[m
     dependency: "direct main"[m
     description:[m
[36m@@ -53,20 +81,27 @@[m [mpackages:[m
     description: flutter[m
     source: sdk[m
     version: "0.0.0"[m
[32m+[m[32m  image:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: image[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "2.1.4"[m
   matcher:[m
     dependency: transitive[m
     description:[m
       name: matcher[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
[31m-    version: "0.12.5"[m
[32m+[m[32m    version: "0.12.6"[m
   meta:[m
     dependency: transitive[m
     description:[m
       name: meta[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
[31m-    version: "1.1.7"[m
[32m+[m[32m    version: "1.1.8"[m
   path:[m
     dependency: transitive[m
     description:[m
[36m@@ -81,6 +116,13 @@[m [mpackages:[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
     version: "1.8.0+1"[m
[32m+[m[32m  petitparser:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: petitparser[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "2.4.0"[m
   quiver:[m
     dependency: transitive[m
     description:[m
[36m@@ -141,7 +183,7 @@[m [mpackages:[m
       name: test_api[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
[31m-    version: "0.2.5"[m
[32m+[m[32m    version: "0.2.11"[m
   typed_data:[m
     dependency: transitive[m
     description:[m
[36m@@ -156,5 +198,12 @@[m [mpackages:[m
       url: "https://pub.dartlang.org"[m
     source: hosted[m
     version: "2.0.8"[m
[32m+[m[32m  xml:[m
[32m+[m[32m    dependency: transitive[m
[32m+[m[32m    description:[m
[32m+[m[32m      name: xml[m
[32m+[m[32m      url: "https://pub.dartlang.org"[m
[32m+[m[32m    source: hosted[m
[32m+[m[32m    version: "3.5.0"[m
 sdks:[m
[31m-  dart: ">=2.2.2 <3.0.0"[m
[32m+[m[32m  dart: ">=2.4.0 <3.0.0"[m
[1mdiff --git a/lib/flutter_gauge.dart b/lib/flutter_gauge.dart[m
[1mindex e0dc2bb..ee008d8 100644[m
[1m--- a/lib/flutter_gauge.dart[m
[1m+++ b/lib/flutter_gauge.dart[m
[36m@@ -51,33 +51,36 @@[m [menum Animate{[m
 [m
 [m
 class FlutterGauge extends StatefulWidget {[m
[31m-  int start;[m
[31m-  int end;[m
[31m-  String fontFamily;[m
[31m-  double widthCircle;[m
[31m-  double index;[m
[31m-  double width;[m
[31m-  Number number;[m
[31m-  NumberInAndOut numberInAndOut;[m
[31m-  CounterAlign counterAlign;[m
[31m-  Hand hand;[m
[31m-  bool isCircle;[m
[31m-  double handSize;[m
[31m-  bool isDecimal;[m
[31m-  SecondsMarker secondsMarker;[m
[31m-  double shadowHand;[m
[31m-  Color circleColor;[m
[31m-  Color handColor;[m
[31m-  Color backgroundColor;[m
[31m-  Color indicatorColor;[m
[31m-  Color inactiveColor;[m
[31m-  Color activeColor;[m
[31m-  double paddingHand;[m
[31m-  Animate animate;[m
[31m-  TextStyle counterStyle;[m
[31m-  TextStyle textStyle;[m
[31m-[m
[31m-  FlutterGauge({this.isDecimal=true,this.inactiveColor = Colors.black,this.activeColor = Colors.red,this.textStyle,this.counterStyle,this.numberInAndOut = NumberInAndOut.inside,this.width/*,this.animate=Animate.none*/,this.paddingHand=30.0,this.circleColor = Colors.cyan,this.handColor = Colors.black,this.backgroundColor = Colors.cyan,this.indicatorColor = Colors.black,this.shadowHand=4.0,this.counterAlign=CounterAlign.bottom,this.number=Number.all,this.isCircle=true,this.hand= Hand.long,this.secondsMarker=SecondsMarker.all,this.handSize=30,this.start=0,this.end=100,@required this.index,this.fontFamily="",this.widthCircle=20,});[m
[32m+[m[32m  final int start;[m
[32m+[m[32m  final int end;[m
[32m+[m[32m  final String fontFamily;[m
[32m+[m[32m  final double widthCircle;[m
[32m+[m[32m  final double index;[m
[32m+[m[32m  final double width;[m
[32m+[m[32m  final Number number;[m
[32m+[m[32m  final NumberInAndOut numberInAndOut;[m
[32m+[m[32m  final CounterAlign counterAlign;[m
[32m+[m[32m  final Hand hand;[m
[32m+[m[32m  final bool isCircle;[m
[32m+[m[32m  final double handSize;[m
[32m+[m[32m  final bool isDecimal;[m
[32m+[m[32m  final SecondsMarker secondsMarker;[m
[32m+[m[32m  final double shadowHand;[m
[32m+[m[32m  final Color circleColor;[m
[32m+[m[32m  final Color handColor;[m
[32m+[m[32m  final Color backgroundColor;[m
[32m+[m[32m  final Color indicatorColor;[m
[32m+[m[32m  final Color inactiveColor;[m
[32m+[m[32m  final Color activeColor;[m
[32m+[m[32m  final double paddingHand;[m
[32m+[m[32m  final Animate animate;[m
[32m+[m[32m  final TextStyle counterStyle;[m
[32m+[m[32m  final TextStyle textStyle;[m
[32m+[m[32m  final bool reverseDigits;[m
[32m+[m[32m  final bool reverseDial;[m
[32m+[m
[32m+[m
[32m+[m[32m  FlutterGauge({this.reverseDigits=false,this.reverseDial=false,this.isDecimal=true,this.inactiveColor = Colors.black,this.activeColor = Colors.red,this.textStyle,this.counterStyle,this.numberInAndOut = NumberInAndOut.outside,this.width,this.animate=Animate.none,this.paddingHand=30.0,this.circleColor,this.handColor = Colors.black,this.backgroundColor = Colors.cyan,this.indicatorColor = Colors.black,this.shadowHand=4.0,this.counterAlign=CounterAlign.bottom,this.number=Number.all,this.isCircle=true,this.hand= Hand.long,this.secondsMarker=SecondsMarker.all,this.handSize=30,this.start=0,this.end=100,@required this.index,this.fontFamily="",this.widthCircle=20,});[m
 [m
 [m
   @override[m
[36m@@ -165,12 +168,14 @@[m [mclass _FlutterGaugeState extends State<FlutterGauge> {[m
   @override[m
   Widget build(BuildContext context) {[m
 //    animateHourHand(widget.index,7.0);[m
[31m-//    eventObservable.add(widget.index);[m
[32m+[m[32m    eventObservable.add(widget.index);[m
     return Column([m
       mainAxisAlignment: MainAxisAlignment.center,[m
       mainAxisSize: MainAxisSize.max,[m
       children: <Widget>[[m
         FlutterGaugeMain([m
[32m+[m[32m          reverseDial: widget.reverseDial,[m
[32m+[m[32m          reverseDigits: widget.reverseDigits,[m
             isDecimal: widget.isDecimal,[m
             counterStyle: widget.counterStyle,[m
             textStyle: widget.textStyle,[m
[36m@@ -196,17 +201,7 @@[m [mclass _FlutterGaugeState extends State<FlutterGauge> {[m
             widthCircle : widget.widthCircle > 30 ? 30 :widget.widthCircle,[m
             inactiveColor : widget.inactiveColor,[m
             activeColor : widget.activeColor,[m
[31m-            width : ([m
[31m-                widget.width == null[m
[31m-                    ?MediaQuery.of(context).size.width/2[m
[31m-                    :widget.width < (MediaQuery.of(context).size.width/2)[m
[31m-                    ?(MediaQuery.of(context).size.width/2)[m
[31m-                    :([m
[31m-                    widget.width > (MediaQuery.of(context).size.width)[m
[31m-                        ?MediaQuery.of(context).size.width[m
[31m-                        :widget.width[m
[31m-                )[m
[31m-            )[m
[32m+[m[32m            width : widget.width[m
         )[m
       ],[m
     );[m
[1mdiff --git a/lib/fluttergauge.dart b/lib/fluttergauge.dart[m
[1mindex afe113a..8f40130 100644[m
[1m--- a/lib/fluttergauge.dart[m
[1m+++ b/lib/fluttergauge.dart[m
[36m@@ -1,9 +1,8 @@[m
 import 'dart:async';[m
[31m-import 'dart:developer';[m
 import 'dart:ui';[m
 [m
 import 'package:flutter/material.dart';[m
[31m-import 'package:flutter/material.dart' as prefix0;[m
[32m+[m
 import 'package:flutter/widgets.dart';[m
 import 'package:flutter_gauge/handpainter.dart';[m
 import 'package:flutter_gauge/linepainter.dart';[m
[36m@@ -12,49 +11,43 @@[m [mimport 'package:rxdart/rxdart.dart';[m
 import 'flutter_gauge.dart';[m
 import 'gaugetextpainter.dart';[m
 [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
 class FlutterGaugeMain extends StatefulWidget {[m
 [m
[31m-  int start;[m
[31m-  int end;[m
[31m-  double highlightStart;[m
[31m-  double highlightEnd;[m
[32m+[m[32m  final int start;[m
[32m+[m[32m  final int end;[m
[32m+[m[32m  final double highlightStart;[m
[32m+[m[32m  final double highlightEnd;[m
 //  ThemeData themeData;[m
[31m-  String fontFamily;[m
[31m-  double widthCircle;[m
[31m-  PublishSubject<double> eventObservable;[m
[31m-  Number number;[m
[31m-  CounterAlign counterAlign;[m
[31m-  Hand hand;[m
[31m-  bool isCircle;[m
[31m-  Map isMark;[m
[31m-  double handSize;[m
[31m-  SecondsMarker secondsMarker;[m
[31m-  double shadowHand;[m
[31m-  Color circleColor;[m
[31m-  Color handColor;[m
[31m-  Color backgroundColor;[m
[31m-  Color indicatorColor;[m
[31m-  double paddingHand;[m
[31m-  double width;[m
[31m-  NumberInAndOut numberInAndOut;[m
[31m-  TextStyle counterStyle;[m
[31m-  TextStyle textStyle;[m
[31m-  EdgeInsets padding;[m
[31m-  Color inactiveColor;[m
[31m-  Color activeColor;[m
[31m-  bool isDecimal;[m
[31m-[m
[31m-[m
[31m-  FlutterGaugeMain({this.isDecimal,this.inactiveColor, this.activeColor, this.textStyle,this.counterStyle,this.numberInAndOut,this.width,this.paddingHand=30.0,this.circleColor = Colors.cyan,this.handColor = Colors.black,this.backgroundColor = Colors.cyan,this.indicatorColor = Colors.black,this.shadowHand=4.0,this.counterAlign=CounterAlign.bottom,this.number=Number.all,this.isCircle=true,this.hand= Hand.long,this.secondsMarker=SecondsMarker.all,this.isMark,this.handSize=30,this.start,this.end,this.highlightStart,this.highlightEnd, this.eventObservable,@required this.fontFamily,@required this.widthCircle,}){[m
[31m-    padding = EdgeInsets.all(widthCircle);[m
[31m-  }[m
[32m+[m[32m  final String fontFamily;[m
[32m+[m[32m  final double widthCircle;[m
[32m+[m[32m  final PublishSubject<double> eventObservable;[m
[32m+[m[32m  final Number number;[m
[32m+[m[32m  final CounterAlign counterAlign;[m
[32m+[m[32m  final Hand hand;[m
[32m+[m[32m  final bool isCircle;[m
[32m+[m[32m  final Map isMark;[m
[32m+[m[32m  final double handSize;[m
[32m+[m[32m  final SecondsMarker secondsMarker;[m
[32m+[m[32m  final double shadowHand;[m
[32m+[m[32m  final Color circleColor;[m
[32m+[m[32m  final Color handColor;[m
[32m+[m[32m  final Color backgroundColor;[m
[32m+[m[32m  final Color indicatorColor;[m
[32m+[m[32m  final double paddingHand;[m
[32m+[m[32m  final double width;[m
[32m+[m[32m  final NumberInAndOut numberInAndOut;[m
[32m+[m[32m  final TextStyle counterStyle;[m
[32m+[m[32m  final TextStyle textStyle;[m
[32m+[m[32m  final EdgeInsets padding;[m
[32m+[m[32m  final Color inactiveColor;[m
[32m+[m[32m  final Color activeColor;[m
[32m+[m[32m  final bool isDecimal;[m
[32m+[m[32m  final bool reverseDigits;[m
[32m+[m[32m  final bool reverseDial;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m  FlutterGaugeMain({this.reverseDial=false,this.reverseDigits=false,this.isDecimal,this.inactiveColor, this.activeColor, this.textStyle,this.counterStyle,this.numberInAndOut,this.width,this.paddingHand=30.0,this.circleColor,this.handColor = Colors.black,this.backgroundColor = Colors.cyan,this.indicatorColor = Colors.black,this.shadowHand=4.0,this.counterAlign=CounterAlign.bottom,this.number=Number.all,this.isCircle=true,this.hand= Hand.long,this.secondsMarker=SecondsMarker.all,this.isMark,this.handSize=30,this.start,this.end,this.highlightStart,this.highlightEnd, this.eventObservable,@required this.fontFamily,@required this.widthCircle,}):padding = EdgeInsets.all(widthCircle);[m
 [m
   @override[m
   _FlutterGaugeMainState createState() => new _FlutterGaugeMainState(this.start,this.end,this.highlightStart,this.highlightEnd,this.eventObservable);[m
[36m@@ -71,14 +64,13 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
   AnimationController percentageAnimationController;[m
   StreamSubscription<double> subscription;[m
 [m
[31m-[m
   @override[m
   void dispose() {[m
     percentageAnimationController.dispose();[m
[32m+[m[32m    subscription.cancel();[m
     super.dispose();[m
   }[m
 [m
[31m-[m
   _FlutterGaugeMainState(int start, int end, double highlightStart, double highlightEnd, PublishSubject<double> eventObservable) {[m
     this.start = start;[m
     this.end = end;[m
[36m@@ -86,10 +78,9 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
     this.highlightEnd = highlightEnd;[m
     this.eventObservable = eventObservable;[m
 [m
[31m-[m
     percentageAnimationController = new AnimationController([m
         vsync: this,[m
[31m-        duration: new Duration(milliseconds: 1000)[m
[32m+[m[32m        duration: new Duration(milliseconds: 20)[m
     )[m
       ..addListener((){[m
         setState(() {[m
[36m@@ -102,20 +93,27 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
   }[m
 [m
   reloadData(double value){[m
[31m-    print(value);[m
[31m-    newVal = value;[m
[31m-    percentageAnimationController.forward(from: 0.0);[m
[31m-  }[m
[32m+[m[32m    //Only update animation controller if the new value is actually new[m
[32m+[m[32m    if (value != newVal){[m
[32m+[m[32m      newVal = value;[m
[32m+[m[32m      percentageAnimationController.forward(from: 0.0);[m
[32m+[m[32m    } else {[m
[32m+[m[32m      //print("fluttergauge.dart::reloadData() value and newVal were equal, leave animation controller alone");[m
[32m+[m[32m    }[m
 [m
[32m+[m[32m  }[m
 [m
   @override[m
   Widget build(BuildContext context) {[m
[32m+[m
     return new Center([m
[32m+[m
       child: new LayoutBuilder([m
           builder: (BuildContext context, BoxConstraints constraints) {[m
[32m+[m
             return new Container([m
[31m-              height: widget.width,[m
[31m-              width: widget.width,[m
[32m+[m[32m              height: widget.width == null ? constraints.maxWidth : widget.width,[m
[32m+[m[32m              width: widget.width == null ? constraints.maxWidth : widget.width,[m
               alignment: Alignment.center,[m
               child: new Stack([m
                   fit: StackFit.expand,[m
[36m@@ -130,7 +128,7 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
                       child: new CustomPaint([m
                           foregroundPainter: new LinePainter([m
                               lineColor: this.widget.backgroundColor,[m
[31m-                              completeColor: this.widget.circleColor,[m
[32m+[m[32m                              completeColor: this.widget.circleColor == null ? Theme.of(context).primaryColor : this.widget.circleColor ,[m
                               startValue: this.start,[m
                               endValue: this.end,[m
                               startPercent: this.widget.highlightStart,[m
[36m@@ -164,6 +162,7 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
                       padding: EdgeInsets.only(top: widget.hand == Hand.short ?widget.widthCircle :widget.widthCircle,bottom: widget.widthCircle,right: widget.widthCircle,left: widget.widthCircle,),[m
                       child: new CustomPaint([m
                           painter: new GaugeTextPainter([m
[32m+[m[32m                              reverseDigits: widget.reverseDigits,[m
                               numberInAndOut: widget.numberInAndOut,[m
                               secondsMarker: widget.secondsMarker,[m
                               number: widget.number,[m
[36m@@ -177,7 +176,7 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
                               widthCircle: widget.widthCircle,[m
                               textStyle:widget.textStyle == null[m
                               ?TextStyle([m
[31m-                                  color: Colors.black,[m
[32m+[m[32m                                  color: Theme.of(context).textTheme.bodyText1.color,[m
                                   fontSize: 15.0,[m
                                   fontFamily: widget.fontFamily[m
                               )[m
[36m@@ -193,6 +192,7 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
                           padding: EdgeInsets.all(widget.hand == Hand.short ?widget.widthCircle/1.5 :widget.paddingHand),[m
                           child: new CustomPaint([m
                             painter: new HandPainter([m
[32m+[m[32m                              reverseDial: widget.reverseDial,[m
                                 shadowHand: widget.shadowHand,[m
                                 hand: widget.hand,[m
                                 value: val,[m
[36m@@ -235,7 +235,13 @@[m [mclass _FlutterGaugeMainState extends State<FlutterGaugeMain>  with TickerProvide[m
                   ][m
               ),[m
             );[m
[32m+[m
[32m+[m
[32m+[m
           }),[m
[32m+[m
[32m+[m
[32m+[m
     );[m
   }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/lib/gaugetextpainter.dart b/lib/gaugetextpainter.dart[m
[1mindex e1fbe13..97f6b06 100644[m
[1m--- a/lib/gaugetextpainter.dart[m
[1m+++ b/lib/gaugetextpainter.dart[m
[36m@@ -2,8 +2,6 @@[m [mimport 'dart:math';[m
 import 'package:flutter/material.dart';[m
 import 'package:flutter_gauge/flutter_gauge.dart';[m
 [m
[31m-import 'fluttergauge.dart';[m
[31m-[m
 class GaugeTextPainter extends CustomPainter {[m
   final hourTickMarkLength = 30.0;[m
   final minuteTickMarkLength = 0.0;[m
[36m@@ -25,26 +23,37 @@[m [mclass GaugeTextPainter extends CustomPainter {[m
   NumberInAndOut numberInAndOut;[m
   Color inactiveColor;[m
   Color activeColor;[m
[32m+[m[32m  bool reverseDigits;[m
 [m
[31m-  GaugeTextPainter({this.inactiveColor, this.activeColor, this.numberInAndOut,this.widthCircle,this.secondsMarker,this.start, this.end, this.value,this.fontFamily,this.textStyle,this.number,})[m
[32m+[m[32m  GaugeTextPainter({this.inactiveColor, this.activeColor, this.numberInAndOut,this.widthCircle,this.secondsMarker,this.start, this.end, this.value,this.fontFamily,this.textStyle,this.number,this.reverseDigits})[m
       : tickPaint = new Paint(),[m
         textPainter = new TextPainter([m
           textAlign: TextAlign.center,[m
           textDirection: TextDirection.rtl,[m
[31m-        ){[m
[32m+[m[32m        )[m
[32m+[m[32m  {[m
     tickPaint.color = activeColor;[m
   }[m
   @override[m
[31m-  void paint(Canvas canvas, Size size) {[m
[32m+[m[32m  void paint(Canvas canvas, Size size)[m
[32m+[m[32m  {[m
[32m+[m[32m    int textLabelInterval = ((end - start) / 10).ceil();[m
[32m+[m
[32m+[m[32m    int textLabelCurrentPosition = 0;[m
[32m+[m
     var tickMarkLength;[m
[31m-    final angle = ((2/3) * 2) * pi / end;[m
[32m+[m[32m    final angle = ((2/3) * 2) * pi / (end - start);[m
 //    final radius = (size.width / 2)-widthCircle;[m
     final radius = (size.width / 2);[m
     canvas.save();[m
     // drawing[m
     canvas.translate(radius, radius);[m
     canvas.rotate(-2.1);[m
[31m-    for (var i = 0; i <= end; i++) {[m
[32m+[m
[32m+[m[32m    int lastlabel = -99999;[m
[32m+[m
[32m+[m[32m    for (var i = 0; i <= end - start; i++)[m
[32m+[m[32m    {[m
       //make the length and stroke of the tick marker longer and thicker depending[m
       tickMarkLength = i % 5 == 0[m
           ? hourTickMarkLength[m
[36m@@ -53,26 +62,20 @@[m [mclass GaugeTextPainter extends CustomPainter {[m
           ?hourTickMarkWidth[m
           : secondsMarker != SecondsMarker.seconds ?minuteTickMarkLength :hourTickMarkWidth;[m
 [m
[31m-      if(value.toInt() == i){[m
[32m+[m[32m      // Set inactive color[m
[32m+[m[32m      if(value.toInt() < start + i){[m
         tickPaint.color = inactiveColor;[m
[31m-[m
       }[m
 [m
[31m-[m
[31m-//      canvas.translate(-1, 0);[m
[31m-//      canvas.transform(4.0);[m
       //seconds & minutes[m
[31m-      if(i != 0 && i != end){ //(end / 1.5).toInt() > i && i != 0[m
[32m+[m[32m      if(i != 0 && i != end - start){ //(end / 1.5).toInt() > i && i != 0[m
         if(secondsMarker == SecondsMarker.all){[m
[31m-[m
           canvas.drawLine(new Offset(0.0, -radius - 21), new Offset(0.0, -radius - 15 + tickMarkLength), tickPaint);[m
         }else if(secondsMarker == SecondsMarker.minutes){[m
           if(i % 5 == 0){[m
[31m-[m
             canvas.drawLine(new Offset(0.0, -radius - 10), new Offset(0.0, -radius - 15 + tickMarkLength), tickPaint);[m
           }[m
         }else if(secondsMarker == SecondsMarker.secondsAndMinute){[m
[31m-[m
           if(i % 5 == 0){[m
             canvas.drawLine(new Offset(0.0, -radius + 20), new Offset(0.0, -radius + 12), tickPaint);[m
           }else{[m
[36m@@ -81,23 +84,33 @@[m [mclass GaugeTextPainter extends CustomPainter {[m
         }else if(secondsMarker == SecondsMarker.seconds){[m
           canvas.drawLine(new Offset(0.0, -radius - widthCircle/2), new Offset(0.0, -radius + widthCircle/2 ), tickPaint);[m
         }[m
[31m-[m
       }[m
 [m
       //draw the text[m
[31m-      if (i % (end < 100 ?5 :10) == 0 || i == end) {[m
[31m-//                String label = i == 40 ? start.toString() : this.end.toString();[m
[31m-        String label = i.toString();[m
[32m+[m[32m      if (i % textLabelInterval == 0 || i == end - start)[m
[32m+[m[32m      {[m
[32m+[m[32m        int labelValue = start + textLabelCurrentPosition * textLabelInterval;[m
[32m+[m[32m        int reverseValue = end - textLabelCurrentPosition * textLabelInterval;[m
[32m+[m
[32m+[m[32m        textLabelCurrentPosition++;[m
[32m+[m[32m        //TODO: this hacky gauge project was further hacked[m
[32m+[m
[32m+[m[32m        if ( i == end - start ){ labelValue = end; }[m
[32m+[m
[32m+[m[32m        String label = reverseDigits ? reverseValue.toString() : labelValue.toString();[m
[32m+[m
[32m+[m[32m        //print("*************************************************** i $i, $valueIncreasePerInterval, $textLabelCurrentPosition, $labelValue");[m
         canvas.save();[m
         if(numberInAndOut == NumberInAndOut.inside){[m
[31m-          canvas.translate(i == 40 ? -0.0 : 0.0, -radius + (widthCircle * 2));[m
[32m+[m[32m          canvas.translate(0.0, -radius + (widthCircle*3));[m
         }else{[m
[31m-          canvas.translate(i == 40 ? -0.0 : 0.0, -radius - (0));[m
[32m+[m[32m          canvas.translate(0.0, -radius - (0));[m
         }[m
 [m
         textPainter.text = new TextSpan([m
           text: label,[m
           style: textStyle,[m
[32m+[m
         );[m
 [m
         //helps make the text painted vertically[m
[36m@@ -105,49 +118,27 @@[m [mclass GaugeTextPainter extends CustomPainter {[m
 [m
         textPainter.layout();[m
 [m
[31m-[m
[31m-        if(number == Number.all){[m
[31m-          textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 1.5)));[m
[31m-        }else if(number == Number.endAndStart){[m
[31m-          if(i == 0 || i == end){[m
[31m-            textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 2)));[m
[31m-          }[m
[31m-        }else if(number == Number.endAndCenterAndStart){[m
[31m-          if(i == 0 || i == end ||  i == end ~/ 2){[m
[32m+[m[32m        if( labelValue >= lastlabel + textLabelInterval - 1 )[m
[32m+[m[32m        {[m
[32m+[m[32m          if(number == Number.all){[m
             textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 1.5)));[m
[32m+[m[32m            lastlabel = labelValue;[m
[32m+[m[32m          }else if(number == Number.endAndStart){[m
[32m+[m[32m            if(i == 0 || i == end - start ){[m
[32m+[m[32m              textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 2)));[m
[32m+[m[32m              lastlabel = labelValue;[m
[32m+[m[32m            }[m
[32m+[m[32m          }else if(number == Number.endAndCenterAndStart){[m
[32m+[m[32m            if(i == 0 || i == end - start ||  i == (end - start) ~/ 2){[m
[32m+[m[32m              textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 1.5)));[m
[32m+[m[32m              lastlabel = labelValue;[m
[32m+[m[32m            }[m
           }[m
         }[m
 [m
[31m-[m
[31m-[m
         canvas.restore();[m
       }[m
 [m
[31m-[m
[31m-      /*  if (i == end/2) {[m
[31m-                String label = this.value.toStringAsFixed(1);[m
[31m-                canvas.save();[m
[31m-                canvas.translate(0.0, -radius + 50.0);[m
[31m-[m
[31m-                textPainter.text = new TextSpan([m
[31m-                    text: label,[m
[31m-                    style: TextStyle([m
[31m-                        color: Colors.black,[m
[31m-                        fontSize: 30.0,[m
[31m-                      fontFamily: fontFamily[m
[31m-                    ),[m
[31m-                );[m
[31m-                canvas.rotate(-angle * i);[m
[31m-[m
[31m-                textPainter.layout();[m
[31m-[m
[31m-[m
[31m-[m
[31m-                textPainter.paint(canvas, new Offset(-(textPainter.width / 2), -(textPainter.height / 2)));[m
[31m-[m
[31m-                canvas.restore();[m
[31m-            }*/[m
[31m-[m
       canvas.rotate(angle);[m
     }[m
 [m
[36m@@ -224,8 +215,8 @@[m [mclass GaugeTextCounter extends CustomPainter {[m
         }[m
 [m
         textPainter.text = new TextSpan([m
[31m-          text: label,[m
[31m-          style: textStyle[m
[32m+[m[32m            text: label,[m
[32m+[m[32m            style: textStyle[m
         );[m
         canvas.rotate(-angle * i);[m
 [m
[36m@@ -248,13 +239,3 @@[m [mclass GaugeTextCounter extends CustomPainter {[m
   }[m
 }[m
 [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/lib/handpainter.dart b/lib/handpainter.dart[m
[1mindex d71fee8..790eafb 100644[m
[1m--- a/lib/handpainter.dart[m
[1m+++ b/lib/handpainter.dart[m
[36m@@ -3,8 +3,6 @@[m [mimport 'dart:math';[m
 import 'package:flutter/material.dart';[m
 import 'package:flutter_gauge/flutter_gauge.dart';[m
 [m
[31m-import 'fluttergauge.dart';[m
[31m-[m
 class HandPainter extends CustomPainter{[m
   final Paint minuteHandPaint;[m
   double value;[m
[36m@@ -14,8 +12,9 @@[m [mclass HandPainter extends CustomPainter{[m
   double handSize;[m
   Hand hand;[m
   double shadowHand;[m
[32m+[m[32m  bool reverseDial;[m
 [m
[31m-  HandPainter({this.shadowHand,this.hand,this.value,this.start,this.end,this.color,this.handSize}):minuteHandPaint= new Paint(){[m
[32m+[m[32m  HandPainter({this.reverseDial, this.shadowHand,this.hand,this.value,this.start,this.end,this.color,this.handSize}):minuteHandPaint= new Paint(){[m
     minuteHandPaint.color= this.color;[m
     minuteHandPaint.style= PaintingStyle.fill;[m
 [m
[36m@@ -23,21 +22,23 @@[m [mclass HandPainter extends CustomPainter{[m
 [m
   @override[m
   void paint(Canvas canvas, Size size) {[m
[32m+[m[32m    int totalRange = this.end - this.start;[m
[32m+[m
[32m+[m[32m    var radius = size.width/2;[m
[32m+[m[32m    double renderRange = 2/3; //Gauge render range[m
 [m
[31m-//      for(int i = 0;i == 2; i++){[m
[31m-    var radius= size.width/2;[m
[31m-    double gamma = ((2/3)*this.end);[m
[32m+[m[32m    double handRotation = (this.value - this.start) / totalRange;[m
 [m
[32m+[m[32m    if( reverseDial ) handRotation = 1 - handRotation;[m
 [m
[31m-    double downSizedValue = ((value <= (this.end/2))? value : value - (this.end/2))*(gamma/this.end);[m
[31m-    double realValue = (((value <= (this.end/2))? downSizedValue + gamma : downSizedValue)%this.end);[m
 [m
[32m+[m[32m    double rotateValue = 2*pi*(handRotation*renderRange) - (2*pi/3);[m
     canvas.save();[m
 [m
     canvas.translate(radius, radius);[m
 [m
[31m-    canvas.rotate(2*pi*((realValue)/this.end));[m
[31m-[m
[32m+[m[32m    canvas.rotate(rotateValue);[m
[32m+[m[32m    //print("******************************************************************************handpainter::paint(): ${this.start} ${this.end} totalRange $totalRange renderRange $renderRange handRotation $handRotation rotate value $rotateValue");[m
 [m
 [m
 [m
[36m@@ -67,8 +68,6 @@[m [mclass HandPainter extends CustomPainter{[m
     canvas.restore();[m
   }[m
 [m
[31m-//    }[m
[31m-[m
   @override[m
   bool shouldRepaint(HandPainter oldDelegate) {[m
     return true;[m
